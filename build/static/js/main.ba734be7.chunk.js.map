{"version":3,"sources":["components/search.js","components/note.js","components/notes.js","components/modalContent.js","App.js","serviceWorker.js","index.js"],"names":["Search","_this","this","react_default","a","createElement","index_es","fullWidth","placeholder","variant","onChange","e","props","filterNotesBySearchResult","target","value","InputProps","startAdornment","position","Search_default","Component","Note","state","isEditMode","editValue","editText","changeEditMode","closeEditText","saveAndCloseEditText","updateNote","oldNote","newNote","body","bool","setState","handleEditChange","note","_this2","_this$state","_this$props","deleteNote","Fragment","id","margin","className","onClick","size","color","title","action","icons_index_es","Notes","notes","filteredKeyword","container","spacing","item","xs","length","map","note_Note","key","ModalContent","newNoteValue","onMultilineChange","classes","handleClose","handleSave","paper","elevation","style","top","concat","left","transform","cardHeader","label","multiline","rowsMax","textField","button","SimpleModalWrapped","withStyles","theme","width","unit","backgroundColor","palette","background","boxShadow","shadows","padding","marginLeft","marginRight","baseUrl","App","open","handleOpen","console","log","lastNote","fetch","method","JSON","stringify","headers","Content-Type","then","res","json","response","updatedNotes","catch","error","filteredNotes","filter","notesToUpdate","findIndex","keyword","determineNotes","includes","alignItems","search_Search","aria-labelledby","aria-describedby","onClose","modalContent","notes_Notes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba734be7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\r\nimport { TextField, InputBase, Input, InputAdornment } from \"@material-ui/core\";\r\n\r\nexport default class Search extends Component {\r\n  render() {\r\n    return (\r\n      <TextField\r\n        fullWidth\r\n        placeholder={\"Search\"}\r\n        variant=\"outlined\"\r\n        onChange={e => this.props.filterNotesBySearchResult(e.target.value)}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          )\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport {\r\n  Card,\r\n  IconButton,\r\n  CardHeader,\r\n  TextField,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport { Delete, Edit } from \"@material-ui/icons\";\r\n\r\nexport default class Note extends Component {\r\n  state = {\r\n    isEditMode: false,\r\n    editValue: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { note } = this.props;\r\n    const { editValue } = this.state;\r\n    //update state with body to providde a default value\r\n    if (editValue !== note.body) {\r\n      this.setState({\r\n        editValue: note.body\r\n      });\r\n    }\r\n  }\r\n  editText = () => {\r\n    this.changeEditMode(true);\r\n  };\r\n\r\n  closeEditText = () => {\r\n    this.changeEditMode(false);\r\n  };\r\n\r\n  saveAndCloseEditText = (updateNote, oldNote, editValue) => {\r\n    this.changeEditMode(false);\r\n    //make a copy of the old note to update with new value\r\n    let newNote = oldNote;\r\n    newNote.body = editValue;\r\n\r\n    updateNote(newNote);\r\n  };\r\n\r\n  changeEditMode = bool => this.setState({ isEditMode: bool });\r\n\r\n  handleEditChange = e => {\r\n    this.setState({\r\n      editValue: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { isEditMode, editValue } = this.state;\r\n    const { note, deleteNote, updateNote } = this.props;\r\n\r\n    return (\r\n      <Card>\r\n        {!isEditMode ? (\r\n          <CardHeader\r\n            title={note.body}\r\n            action={\r\n              <React.Fragment>\r\n                <IconButton onClick={() => this.editText(note)}>\r\n                  <Edit />\r\n                </IconButton>\r\n                <IconButton onClick={() => deleteNote(note.id)}>\r\n                  <Delete />\r\n                </IconButton>\r\n              </React.Fragment>\r\n            }\r\n          />\r\n        ) : (\r\n          <React.Fragment>\r\n            <TextField\r\n              id=\"outlined-bare\"\r\n              value={editValue}\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              onChange={this.handleEditChange}\r\n            />\r\n            <span className={\"update-buttons\"}>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={this.closeEditText}\r\n                size=\"small\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </span>\r\n            <span className={\"update-buttons\"}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={\"update-buttons\"}\r\n                onClick={() =>\r\n                  this.saveAndCloseEditText(updateNote, note, editValue)\r\n                }\r\n                size=\"small\"\r\n              >\r\n                Update\r\n              </Button>\r\n            </span>\r\n          </React.Fragment>\r\n        )}\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Note from \"./note\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nexport default class Notes extends Component {\r\n  render() {\r\n    const { notes, deleteNote, updateNote, filteredKeyword } = this.props;\r\n    return (\r\n      <Grid container spacing={24}>\r\n        <Grid item xs={12} className=\"note-header\">\r\n          <h2>Here are all of your current notes</h2>\r\n        </Grid>\r\n        {notes.length === 0 ? (\r\n          <p className=\"no-notes\">\r\n            Oops! There are no notes! Click new note to get started\r\n          </p>\r\n        ) : (\r\n          notes.map(note => (\r\n            <Grid item xs={3}>\r\n              <Note\r\n                key={note.id}\r\n                note={note}\r\n                deleteNote={deleteNote}\r\n                updateNote={updateNote}\r\n              />\r\n            </Grid>\r\n          ))\r\n        )}\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Input,\r\n  Button,\r\n  Card,\r\n  Typography,\r\n  CardHeader,\r\n  TextField\r\n} from \"@material-ui/core\";\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    margin: \"auto\",\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`\r\n  };\r\n}\r\n\r\nconst styles = theme => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: theme.spacing.unit * 50,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing.unit * 4\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing.unit,\r\n    marginRight: theme.spacing.unit,\r\n    width: theme.spacing.unit * 50\r\n  },\r\n  button: {\r\n    margin: theme.spacing.unit\r\n  },\r\n  cardHeader: {\r\n    margin: theme.spacing.unit\r\n  }\r\n});\r\n\r\nclass ModalContent extends Component {\r\n  state = {\r\n    newNoteValue: \"\"\r\n  };\r\n\r\n  onMultilineChange = e => {\r\n    this.setState({\r\n      newNoteValue: e.target.value\r\n    });\r\n  };\r\n  render() {\r\n    const { newNoteValue } = this.state;\r\n    const { classes, handleClose, handleSave } = this.props;\r\n    return (\r\n      <Card className={classes.paper} elevation={1} style={getModalStyle()}>\r\n        <h2 className={classes.cardHeader}>New Note</h2>\r\n        <TextField\r\n          id=\"outlined-multiline-flexible\"\r\n          label=\"Write down your thoughts\"\r\n          multiline\r\n          rowsMax=\"4\"\r\n          value={newNoteValue}\r\n          onChange={this.onMultilineChange}\r\n          className={classes.textField}\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n        />\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            className={classes.button}\r\n            onClick={handleClose}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={() => handleSave(newNoteValue)}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\n// We need an intermediary variable for handling the recursive nesting.\r\nconst SimpleModalWrapped = withStyles(styles)(ModalContent);\r\n\r\nexport default SimpleModalWrapped;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Search from \"./components/search\";\nimport { Grid, Button, Modal } from \"@material-ui/core\";\nimport Notes from \"./components/notes\";\nimport ModalContent from \"./components/modalContent\";\n\nconst baseUrl = \"https://safe-inlet-97630.herokuapp.com/api/notes\";\n\n//todo extract out api calls\nclass App extends Component {\n  state = {\n    open: false,\n    notes: [\n      { id: 1, body: \"This is the first note\" },\n      { id: 2, body: \"This is the second note\" },\n      { id: 3, body: \"This is the third note\" },\n      { id: 4, body: \"This is the fourth note\" },\n      { id: 5, body: \"This is the fifth note\" }\n    ],\n    filteredKeyword: \"\"\n  };\n\n  componentDidMount() {\n    fetch(baseUrl, {})\n      .then(res => res.json())\n      .then(response =>\n        this.setState({\n          notes: response\n        })\n      )\n      .catch(error => console.error(\"Error:\", error));\n  }\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleSave = body => {\n    const { notes } = this.state;\n    console.log(\"Saving new note: \" + body);\n    //handle creating new note\n    //ajax call to create note\n    //on success, update state\n    //get last id in notes\n    const lastNote = notes[notes.length - 1];\n    const newId = lastNote ? lastNote.id + 1 : 1;\n    const note = { id: newId, body };\n    fetch(baseUrl, {\n      method: \"POST\", // or 'PUT'\n      body: JSON.stringify(note),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(response => {\n        let updatedNotes = this.state.notes.concat(note);\n        this.setState({\n          notes: updatedNotes\n        });\n      })\n      .catch(error => console.error(\"Error:\", error));\n    //todo: add validation to not create a note with the same id\n\n    //then close modal\n    this.handleClose();\n  };\n\n  deleteNote = id => {\n    //remove note with ajax call\n    // on success, filter out note\n    fetch(`${baseUrl}/${id}`, {\n      method: \"DELETE\", // or 'PUT'\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(response => {\n        const filteredNotes = this.state.notes.filter(note => note.id !== id);\n\n        this.setState({\n          notes: filteredNotes\n        });\n      })\n      .catch(error => console.error(\"Error:\", error));\n  };\n\n  updateNote = note => {\n    //update note with ajax call\n    //on success\n    fetch(baseUrl, {\n      method: \"PUT\", // or 'PUT'\n      body: JSON.stringify(note),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(response => {\n        //update note in state\n        //make copy\n        let notesToUpdate = this.state.notes;\n        //find note\n        let noteToUpdate = this.state.notes.findIndex(\n          item => item.id == note.id\n        );\n        //update note\n        notesToUpdate[noteToUpdate] = note;\n\n        this.setState({\n          notes: notesToUpdate\n        });\n      })\n      .catch(error => console.error(\"Error:\", error));\n  };\n\n  filterNotesBySearchResult = keyword => {\n    this.setState({\n      filteredKeyword: keyword\n    });\n  };\n\n  determineNotes = (notes, keyword) => {\n    if (keyword.length > 0) {\n      return notes.filter(note => note.body.includes(keyword));\n    }\n\n    return notes;\n  };\n\n  render() {\n    const { open, notes, filteredKeyword } = this.state;\n\n    //get filtered notes if any\n    const filteredNotes = this.determineNotes(notes, filteredKeyword);\n\n    return (\n      <div className=\"App\">\n        <Grid container spacing={24} alignItems=\"center\">\n          <Grid item xs={6}>\n            <div className=\"search-container\">\n              <Search\n                filterNotesBySearchResult={this.filterNotesBySearchResult}\n              />\n            </div>\n          </Grid>\n          <Grid item xs={3}>\n            <Button\n              variant=\"contained\"\n              className={\"button\"}\n              color=\"primary\"\n              size=\"large\"\n              onClick={this.handleOpen}\n            >\n              New Note\n            </Button>\n          </Grid>\n          <Modal\n            // style={{ alignItems: \"center\", justifyContent: \"center\" }}\n            aria-labelledby=\"simple-modal-title\"\n            aria-describedby=\"simple-modal-description\"\n            open={open}\n            onClose={this.handleClose}\n          >\n            <ModalContent\n              handleClose={this.handleClose}\n              handleSave={this.handleSave}\n            />\n          </Modal>\n          <Grid item xs={12}>\n            <Notes\n              notes={filteredNotes}\n              deleteNote={this.deleteNote}\n              updateNote={this.updateNote}\n            />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}